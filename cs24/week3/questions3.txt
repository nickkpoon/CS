
Week 2 problems: Object-Oriented Programming, Testing and Linked Lists
Required Reading:  Sections 1.4 (through page 44), 2.1, 2.3, 2.4, 3.1, 
3.2 (through page 140).

Remember to solve these individually, working with your partner only when
you get stuck, and seeking help from the TA only when you are both stuck.

This is part of your assignment for the week, not just for the day, so it is 
expected that you may not finish during this lab time.  

For each problem, make sure you write your answer exactly on the line with 
the problem number (i.e. 1a) that follows the question.

For example, if the question looks like this:
0.  What is the last name of the instructor for this class?
0)

The answer should look like this:
0.  What is the last name of the instructor for this class?
0) Franklin

If it is fill in the blank, it would start like this:
0) The last name of the instructor for this class is ___________.

And the answer would look like this:
0) The last name of the instructor for this class is Franklin.

Testing:
1. For each error, identify whether it is a run-time error or compile-time
error.  

Incorrect:
for(i=0;i<n;i++);
    sum += a[i];

Correct:
for(i=0;i<n;i++)
    sum += a[i];

1a) This is a ______________.

Incorrect:
LinkedList *list = new LinkedList(;

Correct:
LinkedList *list = new LinkedList();

1b) This is a ______________.

Incorrect:
if (i != 5)

Correct:
if (i == 5)

1c) This is a ______________.

Incorrect:
if (i = 5)

Correct:
if (i == 5)

1d) This is a ______________.

Incorrect:
int struct;
for(struct = 0; struct < n; struct++)

Correct:
int s;
for(s = 0; s < n; s++)

1e) This is a ______________.

2.  For each sentence, fill in the right word from this list:
black-box testing, clear-box testing, statement coverage, branch, path, and 
path testing

2a) ___________ is a testing technique in which you attempt to run all
possible combinations of branch paths through the code.

2b) Testing a program based on different input values without know what
the code looks like is called ___________.

2c) A code segment that is sometimes, but not always, executed, is considered
a ___________.  Examples include switches, if/else, while loops.

2d) With _______________, you make sure that every instruction in the program
is executed at least once.

3.  Fill in the blank with more, less, or the same number of:
3) Path testing requires ___________ tests compared to statement coverage.

Object-Oriented Principles
4.  For each sentence, fill in the right word from this list:
data abstraction, logical level, implementation level, application level
4a) When working on a project that is modeling real-life structures as a data type, we are working at the _______________.
4b) The separation of a data type's logical properties from its implementation is called ____________.
4c) The code that is in the .cpp file for a data type is the ________________.
4d) The ________________ provides the specification of the data and the operations is will provide. 


5.  For each sentence, fill in the right word from this list:
constructor, transformer, observer
5a) The ____________ contains the initialization of the data structure.
5b) The ____________ is a method that makes no changes to the structure.
5c) ______________ methods make changes to the structure.

Linked Lists / C++
6) The _______ pointer points to the first node in a linked list.
7) For an empty list, the pointer in question 6 has the value _________. 
8) All instance methods in C++ have a hidden first argument named __________.
9) In the LinkedList class, the hidden argument's type is _____________.
10. In a linked list, the last node's next point always has the value _________.
Rewrite the following line for a linked list rather than an array. 
Make sure you use getters and setters.  Assume the same Node class as we saw
in lecture.  I have started it for you.
for(int i=0;i<n;i++)
10) for(Node *tmp;     ;    )
